http://www.cs.dartmouth.edu/~cs5/exams/exam1-review.html
3
<html> <head><title>CS 5 Spring 2009 Review for Exam 1</title></head><body bgcolor=white><h1><a href="/~cs5/">CS 5 Spring 2009</a><br>Review for Exam 1</h1><h2>Ground Rules</h2>The first exam will be on Tuesday, April 28 at 6:00 P.M. in<strong>Silsby 28.  This is not our usual classroom!</strong>.  A review session will be held during x-hour on the previous Thursday.<p>The exam is designed to take 60 to 90 minutes, but you will have asmuch time as you need, within reason.  (If you are languishing, makingno progress, and preventing me from going home, then I'll have to endthe exam.)<p><strong>If you cannot take the exam at 6:00 P.M. on April 28, youmust contact me by April 27 to makeother arrangements</strong>.  Several of you have already contacted me aboutconflicts, but to make sure that we are in agreement I want to havean email conversation confirming when you will be takingthe exam.<p>You may bring a <strong>crib sheet</strong> to the exam, subject tothe following restrictions.  The crib sheet must be a single sheet ofpaper, 8 1/2" x 11" at the largest.  You may write on both sides ofthe sheet.  You may write whatever you like.  But everything on thesheet must be written by you, by hand, and directly onto the sheet.If your handwriting is as bad as mine you may type the crib sheet, but must use at least 10 point font.Photocopying is specifically disallowed.  You will hand in your cribsheet with the exam, and you will get it back with the graded exam.The crib sheet will in no way affect the grading of the exam; I justlike to see them.<p>We expect to have the graded exams back to you in lecture on Wednesday,April 29.<p>Remember that this exam will count toward 15% of your final grade.Even if you get, say, 50 out of 100 onit, you have lost only 7.5% of all available points in the course.So there's no reason to get too uptight about it.<h2>Review Session</h2>There will be an open review session on Thursday, April 23,during x-hour.  Attendance is completely at your option.Come for as much or as little of it as you like.  I also have officehours at the usual times during the week, and am available for appointments outside of those times.<h2>Exam Format</h2>Need I mention that you should read each question carefully and answer<strong>everything</strong> asked of you?  Please please please readeach question <strong>carefully</strong>.  Many CS 5 students havelost points on past exams simply because they did not read thequestions carefully.<p>The exam will have a few short-answer questions and a few longerquestions that will ask you to write small amounts of Java code.<h2>What You Should Know</h2>The exam will cover material through Thursday, April 16, plus the Debugging and Testing part of Friday, April 17.  Applets,GUIs, and graphics will be on the second midterm, not this one.  <!-- applets and simple graphics.  You won't be responsible in this exam --><!-- for material on interfaces, GUIs, events, and listeners. --><p>Don't forget that you can link to the official lecture notes for eachlecture from the <a href="/~cs5/syllabus.html">Syllabus and LectureNotes</a> page.  I suggest that you read these notes.  They contain theinformation that I think is important.  That's what I'll be testingyou on.<p>Also, go over the short assignments and the Homework 1 sample solutions.Again, if I assigned them, I must have thought they were worth learningabout.<h2>Sample Questions</h2>Questions similar to the following have appeared on previous exams.<p>You can find the complete exam from Spring 2008at <a href="Exam 1 (Questions).doc">Exam1(Questions).doc</a> and the solutionto those problems at <a href="Exam 1 (Solution).doc">Exam1(Solution).doc</a><ol>  <li> Everyone's favorite alumnus of both Yale and Harvard, President       George W. Bush, has hired you to write a computer       program in Java to keep       track of his campaign donors who live in Texas, and the town       or city that each donor lives in.  To save space, each of the towns       and cities in Texas is given a number, from 1 (Abbott) to 1971       (Zephyr).  Ever the fiscal conservative, Mr. Bush calls you at       your palatial office in       Pflugerville to instruct you to store the number of each donor's       town or city using the Java type that requires the least amount       of memory but is still large enough for the job.  What Java       type should you use, and why?       <p>  <li> What is the minimum number of times a while loop body is executed?       A do-while loop body?  A for loop body?       <p>  <li> There are two indications in the definition of constructor that       it is in fact a constructor.  What are they?       <p>  <li> What are instance variables?  Might an instance variable reside       in the stack, the heap, or both?       <p>  <li> Consider the following method:       <xmp>       public Clown f(Bozo b)       {         // Who cares what the body is?       }       </xmp>       Now consider the following call:       <xmp>       static public void main(String[] args)       {         Bozo b = new Bozo();         Clown c;                c = f(b);       }       </xmp>       Describe precisely what <code>main</code> passes to <code>f</code>       and how it is passed.  Your description should accurately use the terms       <em>formal parameter</em> and <em>actual parameter</em>.       <p>       Then describe precisely what <code>f</code> sends back       to <code>main</code>, how it is sent back, and what <code>main</code>       does with it.       <p>       Feel free to use diagrams to illustrate your explanations.       <p>  <li> The Summer Olympics have been held every four years since 1896.       <p>       <ol>	 <li> Write a method named <code>isSummerOlympicYear</code>	      that, given an integer <code>y</code>, returns a	      <code>boolean</code>	      indicating whether <code>y</code> is a year in which the	      Summer Olympics have been held or will be held.  (For the	      purpose of this question, assume that the Olympics were not	      interrupted by world wars.)	      <p>	 <li> The Winter Olympics started some time after the Summer Olympics,	      but they were held in the same years as the Summer Olympics	      through 1992.  The Winter Olympics were held in 1994 and are	      held every four years after 1994.  The Summer Olympic schedule	      has not changed.	      	      <p>	      Write a method named <code>isOlympicYear</code> that,	      given an integer <code>y</code>, returns a <code>boolean</code>	      indicating	      whether <code>y</code> is a year in which the either or	      both of the Summer Olympics or Winter Olympics have	      been held or will be held.  You may use a call of the method	      you wrote in part 1.	      <p>	 <li> Write a method named <code>getNonOlympicYear</code>	      that prompts the user to type in a year until the entered	      year is <em>not</em> an Olympic year and then returns this	      year to the caller.  Your method should reprompt the user	      until a non-Olympic year is entered.  Both the prompt and	      the user's response should appear on the same line of the	      console window.  You may use a different prompt upon getting	      an Olympic year, but you are not required to.  You may use a	      call of the method you wrote in part 2.	             </ol>       <p><!--   <li> Consider the following class for creating and drawing hockey pucks: --><!--        <xmp> --><!--        // Puck.java --><!--        import java.awt.*; --><!--        public class Puck --><!--        { --><!-- 	 int myLeft, myTop;          // left and top of the puck --><!-- 	 int myWidth, myHeight;      // width and height of the puck --><!-- 	 public Puck(int left, int top, int width, int height) --><!-- 	 { --><!--            // You will fill this in. --><!-- 	 } --><!-- 	 public void draw(Graphics page) --><!-- 	 { --><!--            // You will fill this in. --><!-- 	 } --><!--        } --><!--        </xmp> --><!--        <ol> --><!-- 	 <li> Write the constructor for the class <code>Puck</code>. --><!-- 	      It only should copy the values of its parameters to --><!-- 	      the appropriate instance variables. --><!-- 	      <p> --><!-- 	 <li> Write the <code>draw</code> method.  It draws the --><!-- 	      <code>Puck</code>, within the bounding rectangle given --><!-- 	      by its parameters, like this: --><!-- 	      <p> --><!-- 	      <center> --><!-- 	      <img src="Puck.GIF"> --><!-- 	      </center> --><!-- 	      <p> --><!-- 	      The dashed lines are not part of the puck; they show the --><!-- 	      rectangle it fits in. -->       <!-- 	      <p> --><!-- 	      You draw a hockey puck by --><!-- 	      <ul> --><!-- 		<li> First drawing a gray oval in the bottom two thirds of --><!-- 		     the puck's bounding rectangle. --><!-- 		     <p> --><!-- 		<li> Then drawing a gray rectangle in the middle third of the --><!-- 		     puck's bounding rectangle. --><!-- 		     <p> --><!-- 		<li> And finally drawing a black oval in the top two thirds of --><!-- 		     the puck's bounding rectangle. --><!-- 	      </ul> --><!-- 	      <p> --><!-- 	      The following sequence shows what you have after drawing --><!-- 	      each part: -->       <!-- 	      <p> --><!-- 	      <center> --><!-- 	      <img src="puck-history.GIF"> --><!-- 	      </center> --><!-- 	      <p> --><!-- 	      To refresh your memory, here are some helpful methods --><!-- 	      of the <code>Graphics</code> class: --><!-- 	      <xmp> --><!-- 	      void drawOval(int x, int y, int width, int height); --><!-- 	      void fillOval(int x, int y, int width, int height); --><!-- 	      void drawRect(int x, int y, int width, int height); --><!-- 	      void fillRect(int x, int y, int width, int height); --><!-- 	      void setColor(Color color);  // sample parameter: Color.black --><!-- 	      </xmp> --><!-- 	      <p> --><!-- 	      You may assume that the puck's height is divisible by 3. -->	      <!-- 	      <p> --><!--        </ol> --><!--        Now you will write a method, <code>THCNightmare</code> that --><!--        draws an array of pucks from within an applet. --><!--        <p> --><!--        <ol start=3> --><!-- 	 <li> Write the following method: --><!-- 	      <xmp> --><!-- 	      private void THCNightmare(Graphics page, int width, int height, --><!--                                         int space, int rows, int columns) --><!-- 	      { --><!-- 	        // You will fill this in. --><!-- 	      } --><!-- 	      </xmp> --><!-- 	      The parameters <code>rows</code> and --><!-- 	      <code>columns</code> give the number of rows and columns of --><!-- 	      pucks.  The parameters <code>width</code> and <code>height</code> --><!-- 	      give the width and height of each puck, in pixels.  The parameter --><!-- 	      <code>space</code> gives the amount of space to leave to the --><!-- 	      right and below each puck, in pixels.  The upper left --><!-- 	      corner of the bounding box of the upper left puck should --><!-- 	      be at pixel (0, 0) within the applet window. --><!-- 	      If, for example, the applet's <code>paint</code> method --><!-- 	      were to call --><!-- 	      <xmp> --><!-- 	      THCNightmare(page, 50, 33, 5, 3, 4); --><!-- 	      </xmp> --><!-- 	      where <code>page</code> references a <code>Graphics</code> --><!-- 	      object for the applet, then it should --><!-- 	      should produce an array of pucks like this: -->       <!-- 	      <p> --><!-- 	      <center> --><!-- 	      <img src="puck-array.GIF"> --><!-- 	      </center> --><!-- 	      <p> --><!-- 	      Your method should work by creating a <code>Puck</code> --><!-- 	      object for each puck it draws and then having this --><!-- 	      <code>Puck</code> object draw itself. -->	      <!--        </ol> -->       <!--        <p> --><!--        Sample solutions for this problem are in <a --><!--        href="Puck.java">Puck.java</a> and <a --><!--        href="Nightmare.java">Nightmare.java</a>.  <strong>It will do you --><!--        no good to look at these solutions before you try to write --><!--        these methods yourself.</strong> --></ol><hr><a href="/~cs5/">Back to CS 5 home page</a><hr><address><a href="http://www.cs.dartmouth.edu/~scot/">Scot Drysdale &lt;scot@cs.dartmouth.edu&gt;</a></address><!-- hhmts start -->Last modified: Sun April 19 2009<!-- hhmts end --></body> </html>i