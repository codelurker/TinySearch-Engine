http://www.cs.dartmouth.edu/~jv/ajax_binary_embedded_data.html
3
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN">
<html lang="en">
<head>
    <title>Quick Note on Getting Binary Embedded AJAX Data into Your Documents</title>
</head>
<body>
    <h1>Introduction</h1>
    <p>
    This note describes my solution to the problem of how we can return image
    data through AJAX and dynamically display that image on our webpage.
    </p>
    <p>
    The software involved is simple.  We have Firefox displaying a page that makes an AJAX call to our mini Python BaseHTTPServer.  The Python BaseHTTPServer then issues a command to a backend program that creates the PNG file.  That program sends the PNG data back to the server, which then packages it up into a JSON, base64 encoded array and sends it back to the browser.  The browser then decodeds the array, and dynamically adds the image to the DOM, displaying the final image.
    
    It should be noted that first, AJAX returns text data.  I have a server that creates PNG images and instead of returning the canonical,
    </p>
    <pre>
        &lt;img src="http://path/to/file/image.png" /&gt;
    </pre>
    <p>
    we'd rather not have to make another call to the server, so we want to instead have the server return,
    </p>
    <pre>
        &lt;img src="data:image/png;base64,..." /&gt;
    </pre>
    <p>
    which is a cool way to embed and the image data into the entire src tag.  This does not require another GET request to our mini-Python server.
    </p>

    <h1>Tasks</h1>
    <ul>
        <li>Show how we make the initial GET request to the server</li>
        <li>Show how to make the HTML image tag and return it in Python server code.</li>
        <li>Show how to encode the image tag in JSON.</li>
        <li>Show how to decode the array and add the resultant image into the DOM.</li>
    </ul>

    
    <h1>The Code</h1>
    <h2>Initial Client (Browser/Firefox) Request</h2>
    <p>
    I use jQuery to handle the nastiness of AJAX requests.  You can ignore the
    callback function -- I'll discuss that at the end.
    
    My request to the server is simply,
    </p>
    <pre>
    //
    // -- in clientFile.js
    //

    // perform the AJAX command on the form; 'c', 's1', and 's2' are the
    // commands we're passing to the Python server.  This will vary depending
    // on what you're doing.  The command .getJSON is a jQuery command that
    // sends an AJAX request to the server at that path you specify (here, I
    // specified outer.serverPath, a predefined value) and it assumes that the
    // server will respond with JSON data.
    .getJSON( outer.serverPath,
        {
            'c' : imgGenerationCommand,
            's1': imgOption1,
            's2': imgOption2
        },
        // when the JSON data is sendt back from the server, run this nested callback
        function(data){
            // wrap the data in an HTML tag, and add it to the DOM's div that
            // matches: #imgBox.
            $("#imgBox").append( "&lt;img src=\"" + data.img + "\" /&gt;");
        }
    </pre>
    <p>
        Couldn't be simpler.
    </p>
    
    <h2>Make an embedded HTML IMG tag</h2>
    <p>
    Again, we want to avoid hitting the server again.  So, here instead of returning
    the typical code for an HTML IMG, we embed it.  In our Python code we have,
    </p>
    <pre>
    #
    # -- in baseServer.py
    #
    import base64

    #
    # Assume your image data is in the binary file called -- inFile
    #
    rawImg = open( inFile, 'rb' )

    # get the binary data as a string	
    inStr = rawImg.read()
    rawImg.close()

    # there should be an easier way to do this, but this works.
    encHeader = "data:image/png;base64,"
    
    # here's the magic.  We pad the binary data with the header from above,
    # and encode it with the base64 library.
    encStr = encHeader + base64.encodestring(inStr) + encFooter
    </pre>
    
    <h2>Encode the string into JSON</h2>
    <p>Because we told jQuery we're expecting JSON data back, we encode the
    string into JSON.  Conceptually, and iplementation-wise, this is very easy.
    For Python < 2.6 download the "simplejson" library.  For Python >= 2.6,
    simply "import json" or "jsonlib" -- I forget the exact name.
    </p>
    <pre>
    # Python < 2.6
    import simplejson
    # Python >= 2.6
    # import jsonlib
    
    # prepare the JSON array and name the result, rVal.  'status' is just
    # a server status record I package into the JSON array.  Remove it if you
    # don't want it there.
    rVal = simplejson.dumps( { "status" : rVal, "img" : encStr } )
   
    # send headers (success) and the return value from PyMOL
    simpleServer.wfile.write( rVal );
    </pre>
        
    <h2>Decode and Use the Image in the Client</h2>
    <p>The JSON array has been returned to us.  Now, we access it in the JSON
    array and then we add it to the DOM.  Most of this is jQuery.  No reasonable
    person would use anything else.  Notice this function is the callback from
    above.
    </p>
    <pre>
    function(data){
        // wrap the data in an HTML tag, and add it to the DOM's div that
        // matches: #imgBox.
        $("#imgBox").append( "&lt;img src=\"" + data.img + "\" /&gt;");
    }        
    </pre>
</body>
</html>
w.ci