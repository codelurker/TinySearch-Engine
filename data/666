http://www.cs.dartmouth.edu/~cs5/exams/exam2-review.html
3
<html> <head><title>CS 5 Spring 2009 Review for Exam 2</title></head><body><h1><a href="/~cs5/">CS 5 Spring 2009</a><br>Review for Exam 2</h1><h2>Ground rules</h2>The second exam will be on Monday, May 18 at 6:00 P.M.<strong>in Moore B03</strong> (NOT the same location as the first exam).<p>As with the first exam, this one is designed to take 60 to 120 minutes(quit snickering!), but you will have as much time as you need, withinreason.<p><strong>If you cannot take the exam at 6:00 P.M. on May 18, youmust contact me by email by Thursday, May 14 to make otherplans.  </strong> <p>As in the first exam, you may bring a <strong>crib sheet</strong> tothe exam, subject to the following restrictions.  The crib sheet mustbe a single sheet of paper, 8 1/2" x 11" at the largest.  You maywrite on both sides of the sheet.  You may write whatever you like.But everything on the sheet must be written by you.  It is easiest towrite it by hand, but if your writing is really bad, you can type the sheet in no smaller than 10 point font.  Photocopying is specifically disallowed.<p>I will also supply you with the class summaries in Appendix M for allclasses that may be used on the exam (Graphics, ArrayList, etc.).Therefore there is no reason to copy this infomation to your crib sheet.See <a href="Java-Mini-Manual">Java Library Quick Reference</a>to see what is provided.  (Note - We have not gotten to a lot of the classes mentioned, but they are included for the final.)<h2>Review session</h2>There will be an open review during x-hour on Thursday, May 14.Attendance iscompletely at your option.  Come for as much or as little of it as youlike.<h2>Exam material and format</h2>The format will be much like the first exam.<p>I am always asked whether the exam will cover the entire course oronly the material since the first exam.  My sarcastic answer: Nothingfrom before the first exam will be on the second exam.  I won't askyou to declare any variables, define any classes, write any loops,etc.  My real answer: <blockquote> The second exam will cover materialfrom the entire course, but it will emphasize material since the firstexam.  </blockquote><p>You should know all the material that we have covered through andincluding the lecture of Monday, May 4.  Recursion and Swing will beon the final.<p>Don't forget that you can link to the official lecture notes for eachlecture from the <a href="/~cs5/syllabus.html">Syllabus and LectureNotes</a> page.  You certainly should have read the relevant portionsof Lewis and Loftus, but even more important is to read the officiallecture notes.  I also suggest looking carefully at the homeworks andshort assignments up through HW 3 and SA 11, and their sample solutions.(You might have noticed a similarity between the short assignments andsome of the questions on last exam.)<h2>A suggestion</h2>We are now in the part of the course in which there are some complexstructures being built up.  <strong>When in doubt, draw apicture.</strong> It will help you understand what is going on.<h2>Practice questions</h2>Please bear in mind that these questions do not represent a completepractice exam!  You can find a the complete Spring 2008 exams at <a href="Exam 2 (Questions) S08.doc">Exam 2 (Questions) S08.doc</a> and the solutionto those at <a href="Exam 2 (Solution) S08.doc">Exam 2 (Solution) S08.doc</a>.  I strongly recommend trying to <em>solve</em> the problems before looking at the solution.<ol>  <li> What is polymorphism?       <p>  <li> What is an abstract class?  In other words, what distinguishes       an abstract class from a class that is not abstract?       <p>  <li> True or false: in the declaration       <xmp>       Bozo [] stuff;       </xmp>       the type of stuff is "array of <code>Bozo</code> object".       Justify your answer.       <p>  <li> What kind of relationship should inheritance model?       <p><!--    <li> In the method call --><!--         <xmp> --><!--         super.doStuff(); --><!--         </xmp> --><!--         why did I say that there was something confusing about the --><!--         syntax? --><!--         <p> -->  <li> What is <code>protected</code> access?       <p>  <li> Recall our example classes for types of bank accounts.  We had       a superclass <code>BankAccount</code>, and it had subclasses       <code>SavingsAccount</code> and <code>CheckingAccount</code>.       The class <code>TimeDepositAccount</code> was a subclass of       <code>SavingsAccount</code>.              <p>       Now suppose that we have the following declarations:       <xmp>BankAccount kimmysAccount = new BankAccount();SavingsAccount dansAccount = new SavingsAccount(4);  // parameter is rateCheckingAccount patsAccount = new CheckingAccount();TimeDepositAccount naomisAccount = new TimeDepositAccount(4.5, 0, 30, 3);	  // parameters are rate, amount, maturity, and penalty       </xmp>       For each of the following assignments, state whether they are       legal and explain why.       <p>       <ol>	 <li> <code>kimmysAccount = patsAccount;</code>	 <li> <code>kimmysAccount = naomisAccount;</code>	 <li> <code>dansAccount = patsAccount;</code>	 <li> <code>dansAccount = kimmysAccount;</code>       </ol>       <p>  <li> What is a listener?  What is the typical scenario in which a       method of a listener is called?              <p>  <li> How are adapter classes and listener interfaces similar?  How       do they differ?  Why might you choose to use a listener interface       rather than an adapter class?  Why might you choose to use       an adapter class rather than a listener interface?              <p>  <li> In the declaration       <xmp>       public class Bozo       </xmp>       is there any class of which <code>Bozo</code> is a subclass?              <p>  <li> A <code>JPanel</code> is good for two purposes in a GUI.  What are they?              <p><!--    <li> What are the two things that every recursive program needs to --><!--         have in order to work? --><!--         <p> --><!--    <li> Suppose you are designing a GUI using Swing.  One part of --><!--         the GUI has 2 radio buttons, labeled <code>AM</code> and --><!--         <code>FM</code>; exactly one of --><!--         these buttons is to be selected at all times.  Another part --><!--         of the GUI has 4 radio buttons, labeled <code>Country</code>, --><!--         <code>Rock</code>, <code>Classical</code>, and <code>Rush --><!--         Limbaugh is a Big Fat Idiot</code>; --><!--         exactly one of these buttons is to be selected at all times. --><!--         How do you specify, using Swing methods, these button groupings --><!--         and that one button in each is selected at all times? --><!--         <p> --><!--    <li> If you are writing a method, say <code>doStuff</code>, that --><!--         calls another method, say <code>readStuff</code>, and --><!--         <code>readStuff</code> can throw an <code>IOException</code> --><!--         (which is checked), you need to satisfy the compiler that --><!--         your <code>doStuff</code> method is aware of the possible --><!--         <code>IOException</code>.  You can do one of two things to --><!--         satisfy the compiler.  Describe both of them. --><!--         <p> --><!--    <li> Define the <strong>even half</strong> of a string --><!--         to be the string of characters obtained if you extracted all --><!--         the characters from even-numbered positions of the string --><!--         and concatenated them together.  For example, the even half --><!--         of the string <code>Bananas</code> is <code>Bnns</code>. --><!--         The even half of an empty string is an empty string. -->       <!--         <p> --><!--         Write a <strong>recursive</strong> method with the header --><!--         <xmp> --><!--         public static String evenHalfOf(String s) --><!--         </xmp> --><!--         that returns the even half of the string referenced by <code>s</code>. --><!--         <p> --><!--         You might find some of the following methods of the --><!--         <code>String</code> class useful: --><!--         <xmp> --><!--         String(String str)        // constructor --><!--         char charAt(int index) --><!--         String concat(String s)   // returns this string concatenated with s --><!--         int length() --><!--         String substring(int offset)  // returns a string that is the substring --><!--                                       // of this string starting at index offset --><!--         String substring(int offset, int endIndex) --><!--                                   // returns a string that is the substring of --><!--                                   // this string starting at index offset and --><!--                                   // extending through index endIndex-1 --><!--         </xmp> --><!--  <li> Suppose we have a class <code>Bozo</code> and its constructor       takes one parameter that is an <code>int</code>.              <p>       <ol>	 <li> Show how to declare a 2-dimensional ragged array of	      <code>Bozo</code>.	      	      <p>	 <li> Suppose the ragged array is to have <code>m</code> rows,	      where row <code>i</code> (starting from row 0) has	      2<code>i</code>+1 entries.  Show how to allocate the entire	      ragged array.	      	      <p>	 <li> Show how to allocate all the <code>Bozo</code> objects	      and make the ragged array reference them.  When you create	      the <code>Bozo</code> in row <code>i</code> and column	      <code>j</code>, call its constructor with the value	      2<code>i</code>+3<code>j</code> (you should of course convert	      this expression to legal Java).       </ol>       <p>  -->       <li> Consider the following class definition, which is a modification       of the one that we used in the <code>SetOfRects</code> class       from lecture:       <xmp>public class SetOfRects{  private Rect [] rects;   // reference to array of rectangles  // Constructor for a setOfRects.  // Makes an empty set of a given max size.  public SetOfRects(int size)  {    rects = new Rect[size];  }  // Add a rectangle to a setOfRects if there's room.  // Returns true if there was room, false otherwise.  public boolean add(Rect r)  {    // YOU FILL THIS IN.  }  // Draw all rectangles in a setOfRects, filled.  public void fill(Graphics page)  {    // YOU FILL THIS IN.  }  // Remove a rectangle that matches the given one,  // returning whether it was in the set.  public boolean remove(Rect r)  {    // YOU FILL THIS IN.  }  // Return how many rectangles are in the set.  public int sizeOf()  {    // YOU FILL THIS IN.  }}              </xmp>       <p>       The <code>Rect</code> class has the following methods:       <xmp>// Constructor.  Takes x and y of upper left corner, width,// height, and color.public Rect(int x, int y, int width, int height, Color rectColor)// Have the Rect object fill itself on the page passed as a parameter.public void fill(Graphics page)// Returns true if the instance variables of the this Rect are// the same as those of Rect r.public boolean equals(Rect r)              </xmp>       <p>       In the class <code>SetOfRects</code>, the instance variable       <code>rects</code> references an array in which each element either       references a <code>Rect</code> object or is <code>null</code>.  If       a <code>SetOfRects</code> contains <i>k</i> rectangles, then       exactly <i>k</i> of the entries in the <code>rects</code> array       are non-<code>null</code>.  Unlike the <code>SetOfRects</code>       implementation from lecture, the <i>k</i> entries referring to       rectangles in the set (i.e., the non-<code>null</code> entries)       are not necessarily entries 0 to <i>k</i>-1.  This is because       <code>remove</code> can remove a rectangle from anywhere in the       set.  As a result, the non-<code>null</code> entries may be       scattered anywhere among the entries of the <code>rects</code>       array.       <p>       In this problem, you will write several of the methods of       the <code>SetOfRects</code> class.  For each one, we will tell       you exactly what the code is supposed to do.  You just have to       write the code that makes it happen.  Be careful not to call       methods on <code>null</code> references.       <p><ol>  <li> Write the method <code>sizeOf</code>.  It should return the number       of rectangles in the set by counting how many entries of       <code>rects</code> are non-<code>null</code> and returning this       number.       <p>  <li> Write the method <code>fill</code>.  It should have each rectangle       in the set draw itself, filled, by calling the <code>fill</code>       method on each non-<code>null</code> entry in the <code>rects</code>       array.       <p>  <li> Write the method <code>add</code>.  It searches through the       <code>rects</code> array to find a <code>null</code> entry.       If it does not find one, it returns <code>false</code> to indicate       failure.  Otherwise, it sets the <code>null</code> entry it found       in <code>rects</code> to instead reference its parameter <code>r</code>       and returns <code>true</code> to indicate success.       <p>  <li> Write the method <code>remove</code>.  It first searches through       the <code>rects</code> array to find a non-<code>null</code>       entry whose instance variables are the same as those of       its parameter <code>r</code>.  (Use a call to <code>equals</code>       after first making sure that the array entry is non-<code>null</code>.)       If it finds such a rectangle, it makes that array entry be       <code>null</code> and returns <code>true</code> to indicate that       it found something to remove.  If no rectangle in the set has       instance variables matching those of <code>r</code>, it simply       returns <code>false</code> to indicate that it did not find       something to remove.       </ol></ol><hr><address><a href="http://www.cs.dartmouth.edu/~scot/">Scot Drysdale &lt;scot@cs.dartmouth.edu&gt;</a></address><!-- hhmts start -->Last modified: Sun May 10 2009<!-- hhmts end --></body> </html>