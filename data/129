http://www.cs.dartmouth.edu/FG
2
<html>
<head>
<title>FG</title>
</head>
<body bgcolor="#ffffff" text="#000033" link="#000064" alink="#000033" 
vlink="#000033">

<center>
<img src="FG-Logo.gif">
</center>

<blockquote> 

<font size="+2"><b>FG Version 1.4</b></font>
<br>
<b>(released July 2006)</b>

<p>

ABCDEFG (<u>A</u>synchronous <u>B</u>uffered <u>C</u>omputation
<u>D</u>esign and <u>E</u>ngineering <u>F</u>ramework
<u>G</u>enerator), which we shorten to FG and pronounce "effigy," is a
programming environment for pipeline-structured programs. Such
programs pass buffers among asynchronous stages, so that while one
stage accesses high-latency data, other stages can make progress.  The
FG project is supported by DARPA, IBM, and the National Science
Foundation.  You can <a href="#fgdownload">download FG version 1.4</a>
from this page.


<p>
<a name="fgdescr"></a>
<font size="+1"><b>About FG</font></b>

<blockquote>

FG is a programming environment for asynchronous programs that run on
clusters and fit into a pipeline framework.  It enables the programmer
to write a series of synchronous functions and represents them as
stages of an asynchronous pipeline.  FG mitigates the high latency
inherent in interprocessor communication and accessing the outer
levels of the memory hierarchy.  It overlaps separate pipeline stages
that perform communication, computation, and I/O by running the stages
asynchronously.  Each stage maps to a thread.  Buffers, whose sizes
correspond to block sizes in the memory hierarchy, traverse the
pipeline.  FG makes such  programs easier
to write, smaller, and faster.  

<p>

New features in FG version 1.4 include disjoint and intersecting
pipelines. FG allows you to run more than one pipeline concurrently on
one processor. This flexibility enables cluster computations in which a given processor may send more or less data than it receives. Please see pages 32-36 in the <a href="fg_tutorial.pdf">FG tutorial</a> for details.


</blockquote>

<font size="+1"><b>People</font></b>
<ul>
  <li> <a href="http://www.cs.dartmouth.edu/~thc/">Thomas H. Cormen</a>
  <li> Priya Natarajan
</ul>

<font size="+1"><b>FG Alumni</b></font>

<ul>
  <li> Elena Riccio Davidson, Ph.D. 2006
  <li> Geeta Chaudhry Petrovic, Ph.D. 2004
  <li> Elizabeth Hamon (Dartmouth '03)
  <li> Brunn Roysden (Dartmouth '04)
  <li> Cristina Maracine (Dartmouth '04)
  <li> Senate Taka (Dartmouth '08)
  <li> Wei Zhang, M.S. 2007
</ul>

<font size="+1"><b>FG Papers</b></font>

<ul>

<li><a href="fg-spaa-brief.pdf">The 
FG Programming Environment: Good and Good <i>For</i> You</a>. 18th ACM 
Symposium on Parallel Algorithms and Architectures (SPAA 2006) brief 
announcement, July 2006.

<li> <a href="FG-ipdps-final.pdf">Building on a Framework: Using FG for More Flexibility and Improved Performance in Parallel Programs</a>.  19th International Parallel and Distributed Processing Symposium (IPDPS 2005).

<li><a href="fg-pphec-final.pdf">The FG Programming Environment: Reducing Source Code Size for Parallel Programs Running on Clusters</a>. Second Workshop on Productivity and Performance in High-End Computing (P-PHEC 2005), pp. 27--34.

  <li> <a href="PDCS.pdf">FG:
       A Framework Generator for Hiding Latency in Parallel Programs Running
       on Clusters</a>.  17th International Conference on Parallel and Distributed Computing Systems (PDCS 2004), pp. 137--144.


  <li> <a href="whitepaper.pdf">Asynchronous
       Buffered Computation Design and Engineering Framework Generator
       (ABCDEFG)</a>. White paper for HECRTF, June 2003.

</ul>



<a name="fgdownload"></a>
<font size="+1"><b>Download FG</b></font>

<blockquote>

Here is everything you need for FG version 1.4. We have a <a
href="fg_tutorial.pdf">tutorial</a> to get you started, and you can
follow the instructions below to install FG.

<p>

<ul>

  <li> <a href="fg1.4.tgz">Download FG version 1.4</a>

  <li> <a href="fg_tutorial.pdf">FG tutorial and reference</a>

</ul>

<p>

If you download and use FG, we invite you to send email to <a
href="mailto:fg@cs.dartmouth.edu">fg@cs.dartmouth.edu</a> to let us
know that you're using it.

<p>

You will need the standard pthread interface library and g++ to
install and run FG.  Download <a
href="fg1.4.tgz">fg1.4.tgz</a>.
Then run the following command from your terminal to unzip the
tarball:

<blockquote> 
<code>tar -xvzf fg1.4.tgz</code>
</blockquote>

This command will unzip the FG files into a directory called
<code>fg1.4</code>. Now you can adjust debugging options and make the
FG library.  There are three debugging options that you can set:
<code>FGLOG</code> for the log file, <code>FGDEBUG</code> for
debugging options, and <code>FGTIMER</code> for timing options.  If
you choose to leave all three options unset, you can make the FG
library with the following command:

<blockquote>
<code>make libfg.a</code>
</blockquote>

You can set the debugging options explicitly in the Makefile, or you
can set them on the command line.  The <code>FGLOG</code> variable may
be set to <code>-DLOGA</code> or <code>-DLOGW</code>, which you would
set on the command line with one of the following:

<blockquote>
<code>make FGLOG=-DLOGA libfg.a
<br>
make FGLOG=-DLOGW libfg.a</code>
</blockquote>
       
If you set either option for <code>FGLOG</code>, FG prints information
about your program, including warnings and errors, to a log file.
With the first argument, FG appends all the information to the log
file, and with the second it overwrites the existing log file.

<p>

The <code>FGDEBUG</code> variable may be set to <code>-DVERBOSE</code>:

<blockquote>
<code>make FGDEBUG=-DVERBOSE libfg.a</code>
</blockquote>

With this setting, FG continually prints information about the program
as it progresses, along with any errors or warnings. It also prints timestamps along with each message. If
<code>FGLOG</code> is set, FG prints this information to the log file.
Otherwise, it prints to standard output.

<p>

Finally, you may set the <code>FGTIMER</code> variable to
<code>-DTIMERPIPELINE</code> or <code>-DTIMERALL</code>, which you
would set on the command line with one of the following:

<blockquote>
<code>make FGTIMER=-DTIMERPIPELINE libfg.a
<br>    
make FGTIMER=-DTIMERALL libfg.a</code>
</blockquote>

The first option times the the pipeline when the first
stage begins executing until the final stage finishes executing.  The
second option times the pipeline from the very first call to FG until
the pipeline is dismantled.  If <code>FGLOG</code> is set, FG prints the
timings to the log file.  Otherwise, it prints the timings to standard
output.

<p>

You may combine any of the three debugging options in any way.  If you
would rather not use the command line, you can change the settings
directly in the Makefile, which is in the <code>fg1.4</code> directory.

<p>

By default, the FG log file is named FG.log, and it is stored in the
directory where you run your program.  You may change both the name
and the directory with environment variables, however.  FG uses the
environment variable <code>FGLOGNAME</code> for the filename and
<code>FGLOGDIR</code> for the directory.

<p>

Any files you create that need to use FG classes and methods must
include the file <code>fg1.4/FG.h</code>. When compiling a program
written with FG, you must link in the FG library file. If your program
is called <code>fgtest.cc</code>, and your <code>fg1.4</code>
directory is located at <code>/net/grad/laney/fg1.4/</code>, you would
build your FG program as follows:

<blockquote>
<code>g++ fgtest.cc -o fgtest -L/net/grad/laney/fg1.4 -lfg -lpthread</code>
</blockquote>

Then you can run the executable file <code>fgtest</code> as usual.

<p>

Because FG creates a multi-threaded program (even if you specify
only one thread), you should ensure that all the software you link
with FG works in a multi-threaded environment.  Be particularly careful
if you are using MPI for interprocessor communication, for not all
implementations of MPI are thread-safe.

<p>

Because they are multi-threaded, FG programs also can create
performance problems associated with disk I/O.  On many systems,
when you run multi-threaded code, C stdio locks a file
every time a thread reads or writes it and unlocks the file when the thread
finishes reading or writing.  The use of locks can slow down
performance considerably, especially in a program where disk I/O is a
time sink.  It can be useful to instead use the unlocked versions of C
stdio functions.  We have found that using <code>fread_unlocked()</code> for
reading and <code>fwrite_unlocked()</code> for writing can be significantly
faster than using the locked counterparts.  Check the man page entry
for <code>unlocked_stdio</code> to determine the support in your system for
unlocked I/O.

<p>

Any questions or comments, please email <a
href="mailto:fg@cs.dartmouth.edu">fg@cs.dartmouth.edu</a>.

</blockquote>

<p>

<font size="+1"><b>Sample Code</b></font>

<blockquote>
The following are sample FG programs from the  <a
href="fg_tutorial.pdf">FG tutorial</a>. You can download these files and build them with the FG library as described above.

<ul>
<li><a href="samples/example2.1.cc">Example 2.1</a>

Try out FG with a simple example.

<li><a href="samples/example2.2.cc">Example 2.2</a>

Implicit threads.

<li><a href="samples/example3.1.cc">Example 3.1</a>

Using the caboose.
<li><a href="samples/example3.2.cc">Example 3.2</a>

Auxiliary thumbnails and buffers.
<li><a href="samples/example3.3.cc">Example 3.3</a>

Thumbnail parameters.
<li><a href="samples/example4.1.cc">Example 4.1</a>

Stage parameters.

<li><a href="samples/example4.2.cc">Example 4.2</a>

Thread initialization and cleanup functions.

<li><a href="samples/example4.3.cc">Example 4.3</a>

Multistage threads.

<li><a href="samples/example5.1.cc">Example 5.1</a>

Soft barriers.

<li><a href="samples/example5.2.cc">Example 5.2</a>
Macros.

<li>Input files for some examples:
<ul>
<li><a href="samples/read_file.dat">read_file.dat</a> For Examples 4.2 and 4.3.
</ul>

</ul>
</blockquote>

</blockquote>

<p>
&nbsp;

</body>
</html>
